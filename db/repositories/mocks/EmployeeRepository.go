// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	models "iHR/db/models"

	mock "github.com/stretchr/testify/mock"
)

// EmployeeRepository is an autogenerated mock type for the EmployeeRepository type
type EmployeeRepository struct {
	mock.Mock
}

// CreateEmployee provides a mock function with given fields: employee
func (_m *EmployeeRepository) CreateEmployee(employee *models.Employee) (*models.Employee, error) {
	ret := _m.Called(employee)

	if len(ret) == 0 {
		panic("no return value specified for CreateEmployee")
	}

	var r0 *models.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Employee) (*models.Employee, error)); ok {
		return rf(employee)
	}
	if rf, ok := ret.Get(0).(func(*models.Employee) *models.Employee); ok {
		r0 = rf(employee)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Employee)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.Employee) error); ok {
		r1 = rf(employee)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEmployee provides a mock function with given fields: id
func (_m *EmployeeRepository) DeleteEmployee(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEmployee")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllEmployees provides a mock function with given fields:
func (_m *EmployeeRepository) GetAllEmployees() ([]models.Employee, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllEmployees")
	}

	var r0 []models.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Employee, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Employee); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Employee)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmployeeByID provides a mock function with given fields: id
func (_m *EmployeeRepository) GetEmployeeByID(id uint) (*models.Employee, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetEmployeeByID")
	}

	var r0 *models.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*models.Employee, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *models.Employee); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Employee)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEmployeeByID provides a mock function with given fields: id, updated
func (_m *EmployeeRepository) UpdateEmployeeByID(id uint, updated *models.Employee) (*models.Employee, error) {
	ret := _m.Called(id, updated)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEmployeeByID")
	}

	var r0 *models.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, *models.Employee) (*models.Employee, error)); ok {
		return rf(id, updated)
	}
	if rf, ok := ret.Get(0).(func(uint, *models.Employee) *models.Employee); ok {
		r0 = rf(id, updated)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Employee)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, *models.Employee) error); ok {
		r1 = rf(id, updated)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEmployeeRepository creates a new instance of EmployeeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmployeeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmployeeRepository {
	mock := &EmployeeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
