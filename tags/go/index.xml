<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Sean&#39;s Blog</title>
    <link>https://tsaisean.github.io/tags/go/</link>
    <description>Recent content in Go on Sean&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 15 Jan 2025 12:00:00 +0000</lastBuildDate>
    <atom:link href="https://tsaisean.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Understanding Isolation Levels in PostgreSQL</title>
      <link>https://tsaisean.github.io/tech/2025-01-16-understanding-isolation-levels-in-postgresql/</link>
      <pubDate>Wed, 15 Jan 2025 12:00:00 +0000</pubDate>
      <guid>https://tsaisean.github.io/tech/2025-01-16-understanding-isolation-levels-in-postgresql/</guid>
      <description>&lt;p&gt;Isolation levels are an essential concept in database management systems, ensuring data consistency and integrity during concurrent transactions. PostgreSQL, known for its robustness and compliance with the SQL standard, implements isolation levels using Multiversion Concurrency Control (MVCC). In this blog, we will explore the four standard isolation levels, their characteristics, and practical examples in PostgreSQL.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-are-isolation-levels&#34;&gt;What Are Isolation Levels?&lt;/h2&gt;&#xA;&lt;p&gt;Isolation levels define the degree to which the operations in one transaction are isolated from those in other concurrent transactions. They help manage phenomena such as:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Back to Go Fundamentals</title>
      <link>https://tsaisean.github.io/tech/2024-12-19-back-to-go-fundamentals/</link>
      <pubDate>Thu, 19 Dec 2024 12:00:00 +0000</pubDate>
      <guid>https://tsaisean.github.io/tech/2024-12-19-back-to-go-fundamentals/</guid>
      <description>&lt;h1 id=&#34;1-built-in-types&#34;&gt;1. Built-in Types&lt;/h1&gt;&#xA;&lt;p&gt;Go has a set of built-in types that include:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Boolean Type:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;bool&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Numeric Types:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Integer types: int, int8, int16, int32, int64&lt;/li&gt;&#xA;&lt;li&gt;Unsigned integer types: uint, uint8 (alias byte), uint16, uint32, uint64, uintptr&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Floating-point types: float32, float64&lt;/li&gt;&#xA;&lt;li&gt;Complex numbers: complex64, complex128&lt;/li&gt;&#xA;&lt;li&gt;String Type: string&lt;/li&gt;&#xA;&lt;li&gt;Alias Types:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;byte (alias for uint8)&lt;/li&gt;&#xA;&lt;li&gt;rune (alias for int32, used for Unicode code points)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;These types are often compared to primitive types in other languages (like Java or Python), as they form the foundation of data types in Go.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
